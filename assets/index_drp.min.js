let users={},attendance=[],userData={},weekendDays=[6];function cleanText(text){return text.replace(/[\x00-\x1F\x7F]/g," ");}function parseUsers(text){let parts=cleanText(text).split(/\s{2,}/).map(p=>p.trim()).filter(Boolean);let rows={};let select=document.getElementById("userSelect");select.innerHTML='<option value="">--Select--</option>';for(let i=0;i<parts.length-1;i++){let namePhone=parts[i],next=parts[i+1];if(/^\d+$/.test(next)){rows[next]={namePhone};i++;}}const sortedEntries=Object.entries(rows).sort((a,b)=>{return a[1].namePhone.localeCompare(b[1].namePhone);});sortedEntries.forEach(([phone,obj])=>{let opt=document.createElement("option");opt.value=phone;opt.textContent=obj.namePhone;select.appendChild(opt);});users=Object.fromEntries(sortedEntries);}function parseAttendance(text){let lines=text.split(/\r?\n/).map(l=>l.trim()).filter(Boolean);let data=[];lines.forEach(line=>{let cols=line.split(/\s+/);if(cols.length>=3)data.push({id:cols[0],date:cols[1],time:cols[2]});});attendance=data;}function createUserTab(userId){const tabs=document.getElementById("userTabs");const tabContents=document.getElementById("tabContents");if(userData[userId])return;userData[userId]={};const tab=document.createElement("div");tab.className="tab";tab.id="tab-"+userId;tab.textContent=users[userId].namePhone;tab.onclick=()=>switchTab(userId);tabs.appendChild(tab);const content=document.createElement("div");content.id="content-"+userId;content.style.display="none";tabContents.appendChild(content);}function switchTab(userId){document.querySelectorAll(".tab").forEach(t=>t.classList.remove("active"));document.querySelectorAll("#tabContents>div").forEach(c=>c.style.display="none");document.getElementById("tab-"+userId).classList.add("active");document.getElementById("content-"+userId).style.display="block";}function filterInOut(){const userId=document.getElementById("userSelect").value;const from=document.getElementById("fromDate").value;const to=document.getElementById("toDate").value;const includeWeekend=document.getElementById("includeWeekend").checked;if(!userId){alert("Select a user");return;}const records=attendance.filter(a=>a.id===userId).filter(r=>(!from||r.date>=from)&&(!to||r.date<=to));const grouped={};records.forEach(r=>{if(!grouped[r.date])grouped[r.date]=[];grouped[r.date].push(r.time);});let allDates=[];let startDate=from?new Date(from):new Date(Math.min(...records.map(r=>new Date(r.date))));let endDate=to?new Date(to):new Date(Math.max(...records.map(r=>new Date(r.date))));for(let d=new Date(startDate);d<=endDate;d.setDate(d.getDate()+1))allDates.push(new Date(d));let rows=[],workedHours=0,workedDays=0;allDates.forEach(d=>{let dateStr=d.toISOString().split("T")[0];let times=grouped[dateStr]||[];times.sort();let first=times[0]||"",last=times.length>1?times[times.length-1]:(times[0]||"");let hours=0;if(first && last){hours=(new Date(dateStr+"T"+last)-new Date(dateStr+"T"+first))/(1000*60*60);workedHours+=hours;workedDays++;}rows.push({date:dateStr,first,last,hours:hours.toFixed(2)});});let expectedDays=includeWeekend?allDates.length:allDates.filter(d=>!weekendDays.includes(d.getDay())).length;let workHoursPerDay=8;let expectedHours=expectedDays*workHoursPerDay;createUserTab(userId);switchTab(userId);renderUserContent(userId,rows,workedDays,expectedDays,workedHours,expectedHours);}function renderUserContent(userId,rows){const content=document.getElementById("content-"+userId);content.innerHTML="";function formatTime(timeStr){if(!timeStr)return "";const parts=timeStr.split(":");if(parts.length>=2){return parts[0].padStart(2,"0")+":"+parts[1].padStart(2,"0");}return timeStr;}function isSaturday(dateStr){const d=new Date(dateStr);return!isNaN(d)&& d.getDay()===6;}let html=`<div style="margin-bottom:8px;"><label>Work Hour/Day:</label><input type="number" id="workHourPerDay-${userId}" value="8" min="1" style="width:70px"></div><table id="table-${userId}" style="width:100%;border-collapse:collapse;"><thead><tr><th>Date</th><th>In</th><th>Out</th><th>Hours</th></tr></thead><tbody>`;rows.forEach((r,i)=>{const first=formatTime(r.first);const last=formatTime(r.last);const saturday=isSaturday(r.date);const excluded=saturday?"true":"false";const bgStyle=saturday?'background-color:#c9134c;color:white;':"";html+=`<tr id="row-${userId}-${i}" data-index="${i}" data-saturday="${saturday}" data-excluded="${excluded}" style="${bgStyle}"><td ondblclick="toggleRowHighlight('${userId}',${i})" style="padding:6px;cursor:pointer;">${r.date}</td><td style="padding:6px;"><span id="firstDisplay-${userId}-${i}" style="cursor:pointer;${first?"":"display:none"}" onclick="editTimeField('${userId}',${i},'first')">${first||"‚Äî"}</span><input type="time" id="firstInput-${userId}-${i}" value="${first}" style="${first?"display:none":""}" onchange="saveTimeAndRecalc('${userId}',${i},'first')"></td><td style="padding:6px;"><span id="lastDisplay-${userId}-${i}" style="cursor:pointer;${last?"":"display:none"}" onclick="editTimeField('${userId}',${i},'last')">${last||"‚Äî"}</span><input type="time" id="lastInput-${userId}-${i}" value="${last}" style="${last?"display:none":""}" onchange="saveTimeAndRecalc('${userId}',${i},'last')"></td><td id="hours-${userId}-${i}" style="padding:6px;text-align:right;">${(parseFloat(r.hours)||0).toFixed(2)}</td></tr>`;});html+=`</tbody><tfoot id="tfoot-${userId}"></tfoot></table><button class="print-btn" style="background:#0e2a49;" onclick="printReport('${userId}')">üñ®Ô∏è Print</button><button class="print-btn" style="background:#217346;" onclick="exportTableToExcel('${userId}')">üìä Excel</button>`;content.innerHTML=html;const perDayInput=document.getElementById(`workHourPerDay-${userId}`);perDayInput.addEventListener("change",()=>recalcFooter(userId));recalcFooter(userId);}function printReport(tableId){const table=document.getElementById('table-'+tableId);if(!table)return;const select=document.getElementById("userSelect");const option=select.querySelector(`option[value="${tableId}"]`);let title=option.textContent .replace(/([a-z])([A-Z0-9])/g,"$1 $2").replace(/([0-9])([a-zA-Z])/g,"$1 $2").replace(/\s+/g," ").trim().replace(/\b\w/g,(c)=>c.toUpperCase());const win=window.open("about:blank","Attendance Report");win.document.write(`<html><head><title>${title}</title><style>body{font-family:Arial,sans-serif;padding:20px;}h1{text-align:center;text-transform:capitalize;margin-bottom:20px;}table{width:100%;border-collapse:collapse;}th,td{border:1px solid #000;padding:6px;text-align:left;}th{background-color:#f2f2f2;}input[type="time"]{display:none;}span{display:inline-block!important;}</style></head><body><h1>${title}</h1>${table.outerHTML}</body></html>`);win.document.close();win.print();win.close();}async function exportTableToExcel(tableId){const table=document.getElementById('table-'+tableId);if(!table)return alert("Table not found!");const select=document.getElementById("userSelect");const option=select?.querySelector(`option[value="${tableId}"]`);const title=option?option.textContent.trim():"Exported Data";const data=[];const rows=table.querySelectorAll("tr");rows.forEach(row=>{const rowData=[];row.querySelectorAll("td").forEach(cell=>{const span=cell.querySelector("span");rowData.push(span?span.textContent.trim():cell.textContent.trim());});if(rowData.some(cell=>cell!==""))data.push(rowData);});if(data.length===0)return alert("No data found in table!");const colCount=data[0].length;const wb=new ExcelJS.Workbook();const ws=wb.addWorksheet("Sheet1");const titleRow=ws.addRow([title]);ws.mergeCells(1,1,1,colCount);titleRow.font={size:16,bold:true,color:{argb:"FFFFFFFF"}};titleRow.alignment={horizontal:"center",vertical:"middle"};titleRow.height=25;titleRow.fill={type:"pattern",pattern:"solid",fgColor:{argb:"FF4472C4"}};data.forEach(row=>ws.addRow(row));for(let i=0;i<colCount;i++){let maxLength=Math.max(title.length,...data.map(r=>(r[i]?r[i].toString().length:0)));ws.getColumn(i+1).width=Math.min(Math.max(maxLength+2,10),40);}const buf=await wb.xlsx.writeBuffer();const blob=new Blob([buf],{type:"application/octet-stream"});saveAs(blob,`${title.replace(/\s+/g,"_")}.xlsx`);}function editTimeField(userId,rowIndex,field){const displayEl=document.getElementById(`${field}Display-${userId}-${rowIndex}`);const inputEl=document.getElementById(`${field}Input-${userId}-${rowIndex}`);if(displayEl && inputEl){displayEl.style.display="none";inputEl.style.display="inline-block";inputEl.focus();}}function saveTimeAndRecalc(userId,rowIndex,field){const inputEl=document.getElementById(`${field}Input-${userId}-${rowIndex}`);const displayEl=document.getElementById(`${field}Display-${userId}-${rowIndex}`);if(!inputEl||!displayEl)return;const newVal=inputEl.value;displayEl.textContent=newVal||"‚Äî";inputEl.style.display="none";displayEl.style.display="inline";const firstVal=document.getElementById(`firstInput-${userId}-${rowIndex}`).value||document.getElementById(`firstDisplay-${userId}-${rowIndex}`).textContent;const lastVal=document.getElementById(`lastInput-${userId}-${rowIndex}`).value||document.getElementById(`lastDisplay-${userId}-${rowIndex}`).textContent;let hours=0;if(firstVal && lastVal && firstVal!=="‚Äî" && lastVal!=="‚Äî"){const t1=new Date(`1970-01-01T${firstVal}:00`);const t2=new Date(`1970-01-01T${lastVal}:00`);const diffMs=t2-t1;hours=diffMs>0?diffMs /(1000 * 60 * 60):0;}const hoursCell=document.getElementById(`hours-${userId}-${rowIndex}`);if(hoursCell)hoursCell.textContent=hours.toFixed(2);recalcFooter(userId);}function toggleRowHighlight(userId,rowIndex){const row=document.getElementById(`row-${userId}-${rowIndex}`);if(!row)return;const wasExcluded=row.getAttribute("data-excluded")==="true";const nowExcluded=!wasExcluded;row.setAttribute("data-excluded",nowExcluded?"true":"false");if(nowExcluded){row.style.backgroundColor="#c9134c";row.style.color="white";}else{row.style.backgroundColor="";row.style.color="";}recalcFooter(userId);}function recalcFooter(userId){const tbodyRows=Array.from(document.querySelectorAll(`#table-${userId}tbody tr`));let workedDays=0;let workedHours=0;let expectedDays=0;tbodyRows.forEach((row)=>{const excluded=row.getAttribute("data-excluded")==="true";if(!excluded)expectedDays++;const hoursCell=row.querySelector(`[id^="hours-${userId}-"]`);const hrs=hoursCell?parseFloat(hoursCell.textContent||"0"):0;if(hrs>0)workedDays++;workedHours+=isNaN(hrs)?0:hrs;});const perDayInput=document.getElementById(`workHourPerDay-${userId}`);const perDay=perDayInput?parseFloat(perDayInput.value)||8:8;const expectedHours=expectedDays * perDay;const tfoot=document.getElementById(`tfoot-${userId}`);tfoot.innerHTML=`<tr><td style="padding:6px;">${workedDays}Days</td><td style="padding:6px;">${expectedDays}Days</td><td style="padding:6px;text-align:right;">${expectedHours.toFixed(2)}Hr</td><td style="padding:6px;text-align:right;">${workedHours.toFixed(2)}Hr</td></tr>`;}function addOperation(userId){const container=document.getElementById("extraOperations-"+userId);const div=document.createElement("div");div.className="operation";div.innerHTML=`<select class="opType"><option value="add">Add</option><option value="sub">Subtract</option></select><input type="number" class="opValue" placeholder="Amount"><input type="text" class="opSubject" placeholder="Subject"><button onclick="this.parentNode.remove()">Remove</button>`;container.appendChild(div);}function calculateSalary(userId,expectedHours,workedHours){const paidLeave=parseFloat(document.getElementById(`paidLeave-${userId}`).value)||0;const adjustedWorkedHours=workedHours+paidLeave;let totalSalary=0;const type=document.getElementById(`salaryType-${userId}`).value;if(type==='month')totalSalary=(adjustedWorkedHours/expectedHours)* parseFloat(document.getElementById(`salaryPerMonth-${userId}`).value||0);else totalSalary=adjustedWorkedHours * parseFloat(document.getElementById(`salaryPerHour-${userId}`).value||0);const ops=document.querySelectorAll(`#extraOperations-${userId}.operation`);let opsBreakdown="";ops.forEach(op=>{const t=op.querySelector(".opType").value,v=parseFloat(op.querySelector(".opValue").value)||0;const s=op.querySelector(".opSubject").value||"Operation";if(t==='add')totalSalary+=v;else totalSalary-=v;opsBreakdown+=`${s}:${t==='add'?'+':'-'}${v}\n`;});document.getElementById(`salaryResult-${userId}`).innerText=`Expected Hours:${expectedHours}\nWorked Hours:${workedHours}\nPaid Leave:${paidLeave}\nAdjusted Worked Hours:${adjustedWorkedHours}\n\nOperations:\n${opsBreakdown}\nTotal Salary:${totalSalary.toFixed(2)}`;}document.getElementById('userFile').addEventListener('change',e=>{const f=e.target.files[0];if(!f)return;const reader=new FileReader();reader.onload=ev=>parseUsers(ev.target.result);reader.readAsText(f);});document.getElementById('attendanceFile').addEventListener('change',e=>{const f=e.target.files[0];if(!f)return;const reader=new FileReader();reader.onload=ev=>parseAttendance(ev.target.result);reader.readAsText(f);});function setPreviousMonthStart(inputId){const input=document.getElementById(inputId);if(!input)return;const now=new Date();const prevMonth=new Date(now.getFullYear(),now.getMonth()-1,1);const yyyy=prevMonth.getFullYear();const mm=String(prevMonth.getMonth()+1).padStart(2,'0');const dd=String(prevMonth.getDate()).padStart(2,'0');input.value=`${yyyy}-${mm}-${dd}`;}setPreviousMonthStart('fromDate');